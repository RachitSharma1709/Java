class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    private Node head;

    // Constructor to initialize an empty linked list
    LinkedList() {
        this.head = null;
    }

    // Method to swap the first and last nodes
    public void swapFirstAndLastNodes() {
        if (head == null || head.next == null) {
            return; // List is empty or has only one node; no need to swap
        }

        Node firstNode = head;
        Node lastNode = head;
        Node prevLast = null;

        while (lastNode.next != null) {
            prevLast = lastNode;
            lastNode = lastNode.next;
        }

        // Swap data of first and last nodes
        int temp = firstNode.data;
        firstNode.data = lastNode.data;
        lastNode.data = temp;
    }

    // Method to pairwise swap elements of the linked list
    public void pairwiseSwap() {
        if (head == null || head.next == null) {
            return; // List is empty or has only one node; no need to swap
        }

        Node current = head;

        while (current != null && current.next != null) {
            int temp = current.data;
            current.data = current.next.data;
            current.next.data = temp;
            current = current.next.next; // Move to the next pair
        }
    }

    // Method to get the location of the first and last occurrence of an element
    public void getLocationOfOccurrences(int target) {
        int firstOccurrence = -1;
        int lastOccurrence = -1;
        int index = 0;
        Node current = head;

        while (current != null) {
            if (current.data == target) {
                if (firstOccurrence == -1) {
                    firstOccurrence = index;
                }
                lastOccurrence = index;
            }
            current = current.next;
            index++;
        }

        if (firstOccurrence != -1) {
            System.out.println("First occurrence of " + target + " at index " + firstOccurrence);
            System.out.println("Last occurrence of " + target + " at index " + lastOccurrence);
        } else {
            System.out.println(target + " not found in the linked list.");
        }
    }

    // Method to remove duplicates from an unsorted linked list
    public void removeDuplicates() {
        if (head == null || head.next == null) {
            return; // List is empty or has only one node; no duplicates to remove
        }

        Node current = head;
        while (current != null) {
            Node runner = current;
            while (runner.next != null) {
                if (runner.next.data == current.data) {
                    runner.next = runner.next.next; // Remove duplicate node
                } else {
                    runner = runner.next;
                }
            }
            current = current.next;
        }
    }

    // Method to delete alternate nodes of the linked list
    public void deleteAlternateNodes() {
        if (head == null || head.next == null) {
            return; // List is empty or has only one node; no alternate nodes to delete
        }

        Node current = head;

        while (current != null && current.next != null) {
            current.next = current.next.next; // Delete the next node (alternate node)
            current = current.next; // Move to the next node
        }
    }

    // Display the linked list
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
}

public class Main2 {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.insertBeginning(10);
        list.insertBeginning(20);
        list.insertBeginning(30);
        list.insertBeginning(20);
        list.insertBeginning(40);

        System.out.println("Original List:");
        list.display();

        list.swapFirstAndLastNodes();
        System.out.println("After Swapping First and Last Nodes:");
        list.display();

        list.pairwiseSwap();
        System.out.println("After Pairwise Swapping:");
        list.display();

        list.getLocationOfOccurrences(20);

        list.removeDuplicates();
        System.out.println("After Removing Duplicates:");
        list.display();

        list.deleteAlternateNodes();
        System.out.println("After Deleting Alternate Nodes:");
        list.display();
    }
}
